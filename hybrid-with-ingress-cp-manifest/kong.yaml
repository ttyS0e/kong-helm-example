---
# Source: kong/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kong-cp-kong
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
---
# Source: kong/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kong-cp-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.8
    release: "kong-cp"
    heritage: "Helm"
type: Opaque
data:
  postgresql-password: "a29uZw=="
---
# Source: kong/templates/wait-for-postgres-script.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-cp-kong-bash-wait-for-postgres
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
data:
  wait.sh: |
    until timeout 2 bash -c "9<>/dev/tcp/${KONG_PG_HOST}/${KONG_PG_PORT}"
      do echo "waiting for db - trying ${KONG_PG_HOST}:${KONG_PG_PORT}"
      sleep 2
    done
---
# Source: kong/templates/custom-resource-definitions.yaml
# generated using: kubectl kustomize github.com/kong/kubernetes-ingress-controller/config/crd?ref=main
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: kongclusterplugins.configuration.konghq.com
spec:
  group: configuration.konghq.com
  names:
    kind: KongClusterPlugin
    listKind: KongClusterPluginList
    plural: kongclusterplugins
    shortNames:
    - kcp
    singular: kongclusterplugin
  preserveUnknownFields: false
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - description: Name of the plugin
      jsonPath: .plugin
      name: Plugin-Type
      type: string
    - description: Age
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: Indicates if the plugin is disabled
      jsonPath: .disabled
      name: Disabled
      priority: 1
      type: boolean
    - description: Configuration of the plugin
      jsonPath: .config
      name: Config
      priority: 1
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: KongClusterPlugin is the Schema for the kongclusterplugins API
        properties:
          config:
            description: Config contains the plugin configuration.
            type: object
            x-kubernetes-preserve-unknown-fields: true
          configFrom:
            description: ConfigFrom references a secret containing the plugin configuration.
            properties:
              secretKeyRef:
                description: NamespacedSecretValueFromSource represents the source
                  of a secret value specifying the secret namespace
                properties:
                  key:
                    description: the key containing the value
                    type: string
                  name:
                    description: the secret containing the key
                    type: string
                  namespace:
                    description: The namespace containing the secret
                    type: string
                required:
                - key
                - name
                - namespace
                type: object
            type: object
          consumerRef:
            description: ConsumerRef is a reference to a particular consumer
            type: string
          disabled:
            description: Disabled set if the plugin is disabled or not
            type: boolean
          plugin:
            description: PluginName is the name of the plugin to which to apply the
              config
            type: string
          protocols:
            description: Protocols configures plugin to run on requests received on
              specific protocols.
            items:
              enum:
              - http
              - https
              - grpc
              - grpcs
              - tcp
              - tls
              - udp
              type: string
            type: array
          run_on:
            description: RunOn configures the plugin to run on the first or the second
              or both nodes in case of a service mesh deployment.
            enum:
            - first
            - second
            - all
            type: string
        required:
        - plugin
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: kong/templates/custom-resource-definitions.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: kongconsumers.configuration.konghq.com
spec:
  group: configuration.konghq.com
  names:
    kind: KongConsumer
    listKind: KongConsumerList
    plural: kongconsumers
    shortNames:
    - kc
    singular: kongconsumer
  preserveUnknownFields: false
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Username of a Kong Consumer
      jsonPath: .username
      name: Username
      type: string
    - description: Age
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1
    schema:
      openAPIV3Schema:
        description: KongConsumer is the Schema for the kongconsumers API
        properties:
          credentials:
            description: Credentials are references to secrets containing a credential
              to be provisioned in Kong.
            items:
              type: string
            type: array
          custom_id:
            description: CustomID existing unique ID for the consumer - useful for
              mapping Kong with users in your existing database
            type: string
          username:
            description: Username unique username of the consumer.
            type: string
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: kong/templates/custom-resource-definitions.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: kongingresses.configuration.konghq.com
spec:
  group: configuration.konghq.com
  names:
    kind: KongIngress
    listKind: KongIngressList
    plural: kongingresses
    shortNames:
    - ki
    singular: kongingress
  preserveUnknownFields: false
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: KongIngress is the Schema for the kongingresses API
        properties:
          proxy:
            description: Service represents a Service in Kong. Read https://getkong.org/docs/0.13.x/admin-api/#Service-object
            properties:
              path:
                type: string
                pattern: ^/.*$
              connect_timeout:
                minimum: 0
                type: integer
              protocol:
                enum:
                - http
                - https
                - grpc
                - grpcs
                - tcp
                - tls
                - udp
                type: string
              read_timeout:
                minimum: 0
                type: integer
              retries:
                minimum: 0
                type: integer
              write_timeout:
                minimum: 0
                type: integer
            type: object
          route:
            description: Route represents a Route in Kong. Read https://getkong.org/docs/0.13.x/admin-api/#Route-object
            properties:
              headers:
                additionalProperties:
                  items:
                    type: string
                  type: array
                type: object
              https_redirect_status_code:
                type: integer
              methods:
                items:
                  type: string
                type: array
              path_handling:
                enum:
                - v0
                - v1
                type: string
              preserve_host:
                type: boolean
              protocols:
                items:
                  enum:
                  - http
                  - https
                  - grpc
                  - grpcs
                  - tcp
                  - tls
                  - udp
                  type: string
                type: array
              regex_priority:
                type: integer
              request_buffering:
                description: "Kong buffers requests and responses by default. Buffering
                  is not always desired, for instance if large payloads are being
                  proxied using HTTP 1.1 chunked encoding. \n The request and response
                  route buffering options are enabled by default and allow the user
                  to disable buffering if desired for their use case. \n SEE ALSO:
                  - https://github.com/Kong/kong/pull/6057 - https://docs.konghq.com/2.2.x/admin-api/#route-object"
                type: boolean
              response_buffering:
                type: boolean
              snis:
                items:
                  type: string
                type: array
              strip_path:
                type: boolean
            type: object
          upstream:
            description: Upstream represents an Upstream in Kong.
            properties:
              algorithm:
                enum:
                - round-robin
                - consistent-hashing
                - least-connections
                type: string
              hash_fallback:
                type: string
              hash_fallback_header:
                type: string
              hash_on:
                type: string
              hash_on_cookie:
                type: string
              hash_on_cookie_path:
                type: string
              hash_on_header:
                type: string
              healthchecks:
                description: Healthcheck represents a health-check config of an upstream
                  in Kong.
                properties:
                  active:
                    description: ActiveHealthcheck configures active health check
                      probing.
                    properties:
                      concurrency:
                        minimum: 1
                        type: integer
                      healthy:
                        description: Healthy configures thresholds and HTTP status
                          codes to mark targets healthy for an upstream.
                        properties:
                          http_statuses:
                            items:
                              type: integer
                            type: array
                          interval:
                            minimum: 0
                            type: integer
                          successes:
                            minimum: 0
                            type: integer
                        type: object
                      http_path:
                        pattern: ^/.*$
                        type: string
                      timeout:
                        minimum: 0
                        type: integer
                      type:
                        type: string
                      unhealthy:
                        description: Unhealthy configures thresholds and HTTP status
                          codes to mark targets unhealthy.
                        properties:
                          http_failures:
                            minimum: 0
                            type: integer
                          http_statuses:
                            items:
                              type: integer
                            type: array
                          interval:
                            minimum: 0
                            type: integer
                          tcp_failures:
                            minimum: 0
                            type: integer
                          timeouts:
                            minimum: 0
                            type: integer
                        type: object
                    type: object
                  passive:
                    description: PassiveHealthcheck configures passive checks around
                      passive health checks.
                    properties:
                      healthy:
                        description: Healthy configures thresholds and HTTP status
                          codes to mark targets healthy for an upstream.
                        properties:
                          http_statuses:
                            items:
                              type: integer
                            type: array
                          interval:
                            minimum: 0
                            type: integer
                          successes:
                            minimum: 0
                            type: integer
                        type: object
                      unhealthy:
                        description: Unhealthy configures thresholds and HTTP status
                          codes to mark targets unhealthy.
                        properties:
                          http_failures:
                            minimum: 0
                            type: integer
                          http_statuses:
                            items:
                              type: integer
                            type: array
                          interval:
                            minimum: 0
                            type: integer
                          tcp_failures:
                            minimum: 0
                            type: integer
                          timeouts:
                            minimum: 0
                            type: integer
                        type: object
                    type: object
                  threshold:
                    type: integer
                type: object
              host_header:
                type: string
              slots:
                minimum: 10
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: kong/templates/custom-resource-definitions.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: kongplugins.configuration.konghq.com
spec:
  group: configuration.konghq.com
  names:
    kind: KongPlugin
    listKind: KongPluginList
    plural: kongplugins
    shortNames:
    - kp
    singular: kongplugin
  preserveUnknownFields: false
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Name of the plugin
      jsonPath: .plugin
      name: Plugin-Type
      type: string
    - description: Age
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: Indicates if the plugin is disabled
      jsonPath: .disabled
      name: Disabled
      priority: 1
      type: boolean
    - description: Configuration of the plugin
      jsonPath: .config
      name: Config
      priority: 1
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: KongPlugin is the Schema for the kongplugins API
        properties:
          config:
            description: Config contains the plugin configuration.
            type: object
            x-kubernetes-preserve-unknown-fields: true
          configFrom:
            description: ConfigFrom references a secret containing the plugin configuration.
            properties:
              secretKeyRef:
                description: SecretValueFromSource represents the source of a secret
                  value
                properties:
                  key:
                    description: the key containing the value
                    type: string
                  name:
                    description: the secret containing the key
                    type: string
                required:
                - key
                - name
                type: object
            type: object
          disabled:
            description: Disabled set if the plugin is disabled or not
            type: boolean
          plugin:
            description: PluginName is the name of the plugin to which to apply the
              config
            type: string
          protocols:
            description: Protocols configures plugin to run on requests received on
              specific protocols.
            items:
              enum:
              - http
              - https
              - grpc
              - grpcs
              - tcp
              - tls
              - udp
              type: string
            type: array
          run_on:
            description: RunOn configures the plugin to run on the first or the second
              or both nodes in case of a service mesh deployment.
            enum:
            - first
            - second
            - all
            type: string
        required:
        - plugin
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: kong/templates/custom-resource-definitions.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.6.2
  creationTimestamp: null
  name: tcpingresses.configuration.konghq.com
spec:
  group: configuration.konghq.com
  names:
    kind: TCPIngress
    listKind: TCPIngressList
    plural: tcpingresses
    singular: tcpingress
  preserveUnknownFields: false
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Address of the load balancer
      jsonPath: .status.loadBalancer.ingress[*].ip
      name: Address
      type: string
    - description: Age
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: TCPIngress is the Schema for the tcpingresses API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: TCPIngressSpec defines the desired state of TCPIngress
            properties:
              rules:
                description: A list of rules used to configure the Ingress.
                items:
                  description: IngressRule represents a rule to apply against incoming
                    requests. Matching is performed based on an (optional) SNI and
                    port.
                  properties:
                    backend:
                      description: Backend defines the referenced service endpoint
                        to which the traffic will be forwarded to.
                      properties:
                        serviceName:
                          description: Specifies the name of the referenced service.
                          type: string
                        servicePort:
                          description: Specifies the port of the referenced service.
                          format: int32
                          maximum: 65535
                          minimum: 1
                          type: integer
                      required:
                      - serviceName
                      - servicePort
                      type: object
                    host:
                      description: Host is the fully qualified domain name of a network
                        host, as defined by RFC 3986. If a Host is specified, the
                        protocol must be TLS over TCP. A plain-text TCP request cannot
                        be routed based on Host. It can only be routed based on Port.
                      type: string
                    port:
                      description: Port is the port on which to accept TCP or TLS
                        over TCP sessions and route. It is a required field. If a
                        Host is not specified, the requested are routed based only
                        on Port.
                      format: int32
                      maximum: 65535
                      minimum: 1
                      type: integer
                  required:
                  - backend
                  type: object
                type: array
              tls:
                description: TLS configuration. This is similar to the `tls` section
                  in the Ingress resource in networking.v1beta1 group. The mapping
                  of SNIs to TLS cert-key pair defined here will be used for HTTP
                  Ingress rules as well. Once can define the mapping in this resource
                  or the original Ingress resource, both have the same effect.
                items:
                  description: IngressTLS describes the transport layer security.
                  properties:
                    hosts:
                      description: Hosts are a list of hosts included in the TLS certificate.
                        The values in this list must match the name/s used in the
                        tlsSecret. Defaults to the wildcard host setting for the loadbalancer
                        controller fulfilling this Ingress, if left unspecified.
                      items:
                        type: string
                      type: array
                    secretName:
                      description: SecretName is the name of the secret used to terminate
                        SSL traffic.
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: TCPIngressStatus defines the observed state of TCPIngress
            properties:
              loadBalancer:
                description: LoadBalancer contains the current status of the load-balancer.
                properties:
                  ingress:
                    description: Ingress is a list containing ingress points for the
                      load-balancer. Traffic intended for the service should be sent
                      to these ingress points.
                    items:
                      description: 'LoadBalancerIngress represents the status of a
                        load-balancer ingress point: traffic intended for the service
                        should be sent to an ingress point.'
                      properties:
                        hostname:
                          description: Hostname is set for load-balancer ingress points
                            that are DNS based (typically AWS load-balancers)
                          type: string
                        ip:
                          description: IP is set for load-balancer ingress points
                            that are IP based (typically GCE or OpenStack load-balancers)
                          type: string
                        ports:
                          description: Ports is a list of records of service ports
                            If used, every port defined in the service should have
                            an entry in it
                          items:
                            properties:
                              error:
                                description: 'Error is to record the problem with
                                  the service port The format of the error shall comply
                                  with the following rules: - built-in error values
                                  shall be specified in this file and those shall
                                  use   CamelCase names - cloud provider specific
                                  error values must have names that comply with the   format
                                  foo.example.com/CamelCase. --- The regex it matches
                                  is (dns1123SubdomainFmt/)?(qualifiedNameFmt)'
                                maxLength: 316
                                pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                                type: string
                              port:
                                description: Port is the port number of the service
                                  port of which status is recorded here
                                format: int32
                                type: integer
                              protocol:
                                default: TCP
                                description: 'Protocol is the protocol of the service
                                  port of which status is recorded here The supported
                                  values are: "TCP", "UDP", "SCTP"'
                                type: string
                            required:
                            - port
                            - protocol
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                      type: object
                    type: array
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: kong/templates/custom-resource-definitions.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.6.2
  creationTimestamp: null
  name: udpingresses.configuration.konghq.com
spec:
  group: configuration.konghq.com
  names:
    kind: UDPIngress
    listKind: UDPIngressList
    plural: udpingresses
    singular: udpingress
  preserveUnknownFields: false
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Address of the load balancer
      jsonPath: .status.loadBalancer.ingress[*].ip
      name: Address
      type: string
    - description: Age
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: UDPIngress is the Schema for the udpingresses API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: UDPIngressSpec defines the desired state of UDPIngress
            properties:
              rules:
                description: A list of rules used to configure the Ingress.
                items:
                  description: UDPIngressRule represents a rule to apply against incoming
                    requests wherein no Host matching is available for request routing,
                    only the port is used to match requests.
                  properties:
                    backend:
                      description: Backend defines the Kubernetes service which accepts
                        traffic from the listening Port defined above.
                      properties:
                        serviceName:
                          description: Specifies the name of the referenced service.
                          type: string
                        servicePort:
                          description: Specifies the port of the referenced service.
                          format: int32
                          maximum: 65535
                          minimum: 1
                          type: integer
                      required:
                      - serviceName
                      - servicePort
                      type: object
                    port:
                      description: Port indicates the port for the Kong proxy to accept
                        incoming traffic on, which will then be routed to the service
                        Backend.
                      type: integer
                  required:
                  - backend
                  - port
                  type: object
                type: array
            type: object
          status:
            description: UDPIngressStatus defines the observed state of UDPIngress
            properties:
              loadBalancer:
                description: LoadBalancer contains the current status of the load-balancer.
                properties:
                  ingress:
                    description: Ingress is a list containing ingress points for the
                      load-balancer. Traffic intended for the service should be sent
                      to these ingress points.
                    items:
                      description: 'LoadBalancerIngress represents the status of a
                        load-balancer ingress point: traffic intended for the service
                        should be sent to an ingress point.'
                      properties:
                        hostname:
                          description: Hostname is set for load-balancer ingress points
                            that are DNS based (typically AWS load-balancers)
                          type: string
                        ip:
                          description: IP is set for load-balancer ingress points
                            that are IP based (typically GCE or OpenStack load-balancers)
                          type: string
                        ports:
                          description: Ports is a list of records of service ports
                            If used, every port defined in the service should have
                            an entry in it
                          items:
                            properties:
                              error:
                                description: 'Error is to record the problem with
                                  the service port The format of the error shall comply
                                  with the following rules: - built-in error values
                                  shall be specified in this file and those shall
                                  use   CamelCase names - cloud provider specific
                                  error values must have names that comply with the   format
                                  foo.example.com/CamelCase. --- The regex it matches
                                  is (dns1123SubdomainFmt/)?(qualifiedNameFmt)'
                                maxLength: 316
                                pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                                type: string
                              port:
                                description: Port is the port number of the service
                                  port of which status is recorded here
                                format: int32
                                type: integer
                              protocol:
                                default: TCP
                                description: 'Protocol is the protocol of the service
                                  port of which status is recorded here The supported
                                  values are: "TCP", "UDP", "SCTP"'
                                type: string
                            required:
                            - port
                            - protocol
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                      type: object
                    type: array
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: kong/templates/controller-rbac-resources.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
  name: kong-cp-kong
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongclusterplugins
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongclusterplugins/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongconsumers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongconsumers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongingresses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongplugins
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongplugins/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - tcpingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - tcpingresses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - udpingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - udpingresses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - networking.internal.knative.dev
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.internal.knative.dev
  resources:
  - ingresses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - get
  - patch
  - update
---
# Source: kong/templates/controller-rbac-resources.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kong-cp-kong
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kong-cp-kong
subjects:
  - kind: ServiceAccount
    name: kong-cp-kong
    namespace: kong-control-plane
---
# Source: kong/templates/controller-rbac-resources.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kong-cp-kong
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<kong-ingress-controller-leader-nginx>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "kong-ingress-controller-leader-kong-kong"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
  # Begin KIC 2.x leader permissions
  - apiGroups:
      - ""
      - coordination.k8s.io
    resources:
      - configmaps
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
    verbs:
      - get
---
# Source: kong/templates/controller-rbac-resources.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kong-cp-kong
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kong-cp-kong
subjects:
  - kind: ServiceAccount
    name: kong-cp-kong
    namespace: kong-control-plane
---
# Source: kong/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: kong-cp-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.6.8
    release: "kong-cp"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "kong-cp"
---
# Source: kong/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kong-cp-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.8
    release: "kong-cp"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "kong-cp"
    role: master
---
# Source: kong/templates/service-kong-admin.yaml
apiVersion: v1
kind: Service
metadata:
  name: kong-cp-kong-admin
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
spec:
  type: ClusterIP
  ports:
  - name: kong-admin
    port: 8001
    targetPort: 8001
    protocol: TCP
  selector:
    app.kubernetes.io/name: kong
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: "kong-cp"
---
# Source: kong/templates/service-kong-cluster-telemetry.yaml
apiVersion: v1
kind: Service
metadata:
  name: kong-cp-kong-clustertelemetry
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
spec:
  type: ClusterIP
  ports:
  - name: kong-clustertelemetry-tls
    port: 8006
    targetPort: 8006
    protocol: TCP
  selector:
    app.kubernetes.io/name: kong
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: "kong-cp"
---
# Source: kong/templates/service-kong-cluster.yaml
apiVersion: v1
kind: Service
metadata:
  name: kong-cp-kong-cluster
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
spec:
  type: ClusterIP
  ports:
  - name: kong-cluster-tls
    port: 8005
    targetPort: 8005
    protocol: TCP
  selector:
    app.kubernetes.io/name: kong
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: "kong-cp"
---
# Source: kong/templates/service-kong-manager.yaml
apiVersion: v1
kind: Service
metadata:
  name: kong-cp-kong-manager
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
spec:
  type: ClusterIP
  ports:
  - name: kong-manager
    port: 8002
    targetPort: 8002
    protocol: TCP
  selector:
    app.kubernetes.io/name: kong
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: "kong-cp"
---
# Source: kong/templates/service-kong-portal-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: kong-cp-kong-portalapi
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
spec:
  type: ClusterIP
  ports:
  - name: kong-portalapi
    port: 8004
    targetPort: 8004
    protocol: TCP
  selector:
    app.kubernetes.io/name: kong
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: "kong-cp"
---
# Source: kong/templates/service-kong-portal.yaml
apiVersion: v1
kind: Service
metadata:
  name: kong-cp-kong-portal
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
spec:
  type: ClusterIP
  ports:
  - name: kong-portal
    port: 8003
    targetPort: 8003
    protocol: TCP
  selector:
    app.kubernetes.io/name: kong
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: "kong-cp"
---
# Source: kong/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong-cp-kong
  namespace:  kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
    app.kubernetes.io/component: app
  annotations:
    kuma.io/gateway: "enabled"
    traffic.sidecar.istio.io/includeInboundPorts: ""
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kong
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: "kong-cp"

  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: kong
        helm.sh/chart: kong-2.6.1
        app.kubernetes.io/instance: "kong-cp"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/version: "2.6"
        app.kubernetes.io/component: app
    spec:
      serviceAccountName: kong-cp-kong
      automountServiceAccountToken: true
      initContainers:
      - name: clear-stale-pid
        image: kong/kong-gateway:2.6.0.0-alpine
        command:
        - "rm"
        - "-vrf"
        - "$KONG_PREFIX/pids"
        env:
         
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_API_URI
          value: "https://kong-admin.k3s.local"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_AUTH
          value: "basic-auth"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_LISTEN
          value: "0.0.0.0:8002"
        - name: KONG_ADMIN_GUI_SESSION_CONF
          valueFrom:
            secretKeyRef:
              name: kong-session-config
              key: admin_gui_session_conf
        - name: KONG_ADMIN_GUI_URL
          value: "https://kong-manager.k3s.local"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl"
        - name: KONG_CLUSTER_TELEMETRY_LISTEN
          value: "0.0.0.0:8006 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_ENFORCE_RBAC
          value: "on"
        - name: KONG_KIC
          value: "on"
        - name: KONG_LICENSE_DATA
          valueFrom:
            secretKeyRef:
              name: kong-enterprise-license
              key: license
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: kong-enterprise-superuser-password
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql"
        - name: KONG_PG_PASSWORD
          value: "kong"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PLUGINS
          value: "bundled"
        - name: KONG_PORTAL
          value: "on"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PORTAL_API_LISTEN
          value: "0.0.0.0:8004"
        - name: KONG_PORTAL_API_URL
          value: "https://kong-portalapi.k3s.local"
        - name: KONG_PORTAL_GUI_HOST
          value: "kong-portal.k3s.local:443"
        - name: KONG_PORTAL_GUI_LISTEN
          value: "0.0.0.0:8003"
        - name: KONG_PORTAL_GUI_PROTOCOL
          value: "https"
        - name: KONG_PORTAL_SESSION_CONF
          valueFrom:
            secretKeyRef:
              key: portal_session_conf
              name: kong-session-config
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, 0.0.0.0:8443 http2 ssl"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_SMTP_MOCK
          value: "on"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        volumeMounts:
        - name: kong-cp-kong-prefix-dir
          mountPath: /kong_prefix/
        - name: kong-cp-kong-tmp
          mountPath: /tmp
        - name:  kong-cluster-cert
          mountPath: /etc/secrets/kong-cluster-cert
      
      - name: wait-for-db
        image: kong/kong-gateway:2.6.0.0-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
        
          {} 
        env:
         
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_API_URI
          value: "https://kong-admin.k3s.local"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_AUTH
          value: "basic-auth"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_LISTEN
          value: "0.0.0.0:8002"
        - name: KONG_ADMIN_GUI_SESSION_CONF
          valueFrom:
            secretKeyRef:
              name: kong-session-config
              key: admin_gui_session_conf
        - name: KONG_ADMIN_GUI_URL
          value: "https://kong-manager.k3s.local"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl"
        - name: KONG_CLUSTER_TELEMETRY_LISTEN
          value: "0.0.0.0:8006 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_ENFORCE_RBAC
          value: "on"
        - name: KONG_KIC
          value: "on"
        - name: KONG_LICENSE_DATA
          valueFrom:
            secretKeyRef:
              name: kong-enterprise-license
              key: license
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: kong-enterprise-superuser-password
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql"
        - name: KONG_PG_PASSWORD
          value: "kong"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PLUGINS
          value: "bundled"
        - name: KONG_PORTAL
          value: "on"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PORTAL_API_LISTEN
          value: "0.0.0.0:8004"
        - name: KONG_PORTAL_API_URL
          value: "https://kong-portalapi.k3s.local"
        - name: KONG_PORTAL_GUI_HOST
          value: "kong-portal.k3s.local:443"
        - name: KONG_PORTAL_GUI_LISTEN
          value: "0.0.0.0:8003"
        - name: KONG_PORTAL_GUI_PROTOCOL
          value: "https"
        - name: KONG_PORTAL_SESSION_CONF
          valueFrom:
            secretKeyRef:
              key: portal_session_conf
              name: kong-session-config
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, 0.0.0.0:8443 http2 ssl"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_SMTP_MOCK
          value: "on"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
      
        args: [ "/bin/sh", "-c", "export KONG_NGINX_DAEMON=on; until kong start; do echo 'waiting for db'; sleep 1; done; kong stop; rm -fv '/kong_prefix//stream_rpc.sock'"]
        volumeMounts:
          - name: kong-cp-kong-prefix-dir
            mountPath: /kong_prefix/
          - name: kong-cp-kong-tmp
            mountPath: /tmp
          - name:  kong-cluster-cert
            mountPath: /etc/secrets/kong-cluster-cert
          
        resources:
          {}
      containers:
      - name: ingress-controller
        securityContext:
      
          {}  
        args:
        
        ports:
        - name: cmetrics
          containerPort: 10255
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace  
        
        
        - name: CONTROLLER_ELECTION_ID
          value: "kong-ingress-controller-leader-kong"
        - name: CONTROLLER_INGRESS_CLASS
          value: "kong"
        - name: CONTROLLER_KONG_ADMIN_TLS_SKIP_VERIFY
          value: "true"
        - name: CONTROLLER_KONG_ADMIN_URL
          value: "http://localhost:8001"
        - name: CONTROLLER_PUBLISH_SERVICE
          value: "kong-control-plane/kong-cp-kong-proxy"
        image: kong/kubernetes-ingress-controller:2.0
        imagePullPolicy: IfNotPresent
      
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          {}
      
      - name: "proxy"
        image: kong/kong-gateway:2.6.0.0-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
        
          {}  
        env:
         
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_API_URI
          value: "https://kong-admin.k3s.local"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_AUTH
          value: "basic-auth"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_LISTEN
          value: "0.0.0.0:8002"
        - name: KONG_ADMIN_GUI_SESSION_CONF
          valueFrom:
            secretKeyRef:
              name: kong-session-config
              key: admin_gui_session_conf
        - name: KONG_ADMIN_GUI_URL
          value: "https://kong-manager.k3s.local"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl"
        - name: KONG_CLUSTER_TELEMETRY_LISTEN
          value: "0.0.0.0:8006 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_ENFORCE_RBAC
          value: "on"
        - name: KONG_KIC
          value: "on"
        - name: KONG_LICENSE_DATA
          valueFrom:
            secretKeyRef:
              name: kong-enterprise-license
              key: license
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: kong-enterprise-superuser-password
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql"
        - name: KONG_PG_PASSWORD
          value: "kong"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PLUGINS
          value: "bundled"
        - name: KONG_PORTAL
          value: "on"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PORTAL_API_LISTEN
          value: "0.0.0.0:8004"
        - name: KONG_PORTAL_API_URL
          value: "https://kong-portalapi.k3s.local"
        - name: KONG_PORTAL_GUI_HOST
          value: "kong-portal.k3s.local:443"
        - name: KONG_PORTAL_GUI_LISTEN
          value: "0.0.0.0:8003"
        - name: KONG_PORTAL_GUI_PROTOCOL
          value: "https"
        - name: KONG_PORTAL_SESSION_CONF
          valueFrom:
            secretKeyRef:
              key: portal_session_conf
              name: kong-session-config
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, 0.0.0.0:8443 http2 ssl"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_SMTP_MOCK
          value: "on"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - /bin/sleep 15 && kong quit
        ports:
        - name: admin
          containerPort: 8001
          protocol: TCP
        - name: status
          containerPort: 8100
          protocol: TCP
        - name: cluster-tls
          containerPort: 8005
          protocol: TCP
        - name: manager
          containerPort: 8002
          protocol: TCP
        - name: portal
          containerPort: 8003
          protocol: TCP
        - name: portalapi
          containerPort: 8004
          protocol: TCP
        - name: clustert-tls
          containerPort: 8006
          protocol: TCP
        volumeMounts:
          - name: kong-cp-kong-prefix-dir
            mountPath: /kong_prefix/
          - name: kong-cp-kong-tmp
            mountPath: /tmp
          - name:  kong-cluster-cert
            mountPath: /etc/secrets/kong-cluster-cert
          
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: status
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: status
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          {} 
      securityContext:
        {}
      terminationGracePeriodSeconds: 30
      tolerations:
        []
      volumes:
        - name: kong-cp-kong-prefix-dir
          emptyDir: {}
        - name: kong-cp-kong-tmp
          emptyDir: {}
        - name: kong-cp-kong-bash-wait-for-postgres
          configMap:
            name: kong-cp-kong-bash-wait-for-postgres
            defaultMode: 0755
        - name: kong-cluster-cert
          secret:
            secretName: kong-cluster-cert
---
# Source: kong/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kong-cp-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.8
    release: "kong-cp"
    heritage: "Helm"
spec:
  serviceName: kong-cp-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "kong-cp"
      role: master
  template:
    metadata:
      name: kong-cp-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.6.8
        release: "kong-cp"
        heritage: "Helm"
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      containers:
        - name: kong-cp-postgresql
          image: docker.io/bitnami/postgresql:11.7.0-debian-10-r37
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "kong"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kong-cp-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "kong"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "kong" -d "kong" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "kong" -d "kong" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: kong/templates/migrations.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: kong-cp-kong-init-migrations
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
    app.kubernetes.io/component: init-migrations
  annotations:
spec:
  backoffLimit: 
  template:
    metadata:
      name: kong-init-migrations
      labels:
        app.kubernetes.io/name: kong
        helm.sh/chart: kong-2.6.1
        app.kubernetes.io/instance: "kong-cp"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/version: "2.6"
        app.kubernetes.io/component: init-migrations
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: kong-cp-kong
      automountServiceAccountToken: true
      initContainers:
      - name: wait-for-postgres 
        image: kong/kong-gateway:2.6.0.0-alpine
        imagePullPolicy: IfNotPresent
        env:
         
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_API_URI
          value: "https://kong-admin.k3s.local"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_AUTH
          value: "basic-auth"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_LISTEN
          value: "0.0.0.0:8002"
        - name: KONG_ADMIN_GUI_SESSION_CONF
          valueFrom:
            secretKeyRef:
              name: kong-session-config
              key: admin_gui_session_conf
        - name: KONG_ADMIN_GUI_URL
          value: "https://kong-manager.k3s.local"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl"
        - name: KONG_CLUSTER_TELEMETRY_LISTEN
          value: "0.0.0.0:8006 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_ENFORCE_RBAC
          value: "on"
        - name: KONG_KIC
          value: "on"
        - name: KONG_LICENSE_DATA
          valueFrom:
            secretKeyRef:
              name: kong-enterprise-license
              key: license
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: kong-enterprise-superuser-password
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql"
        - name: KONG_PG_PASSWORD
          value: "kong"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PLUGINS
          value: "bundled"
        - name: KONG_PORTAL
          value: "on"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PORTAL_API_LISTEN
          value: "0.0.0.0:8004"
        - name: KONG_PORTAL_API_URL
          value: "https://kong-portalapi.k3s.local"
        - name: KONG_PORTAL_GUI_HOST
          value: "kong-portal.k3s.local:443"
        - name: KONG_PORTAL_GUI_LISTEN
          value: "0.0.0.0:8003"
        - name: KONG_PORTAL_GUI_PROTOCOL
          value: "https"
        - name: KONG_PORTAL_SESSION_CONF
          valueFrom:
            secretKeyRef:
              key: portal_session_conf
              name: kong-session-config
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, 0.0.0.0:8443 http2 ssl"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_SMTP_MOCK
          value: "on"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        command: [ "bash", "/wait_postgres/wait.sh" ]
        volumeMounts:
        - name: kong-cp-kong-bash-wait-for-postgres
          mountPath: /wait_postgres
        resources:
          {}
      containers:
      - name: kong-migrations
        image: kong/kong-gateway:2.6.0.0-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
        
          {} 
        env:
         
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_API_URI
          value: "https://kong-admin.k3s.local"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_AUTH
          value: "basic-auth"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_LISTEN
          value: "0.0.0.0:8002"
        - name: KONG_ADMIN_GUI_SESSION_CONF
          valueFrom:
            secretKeyRef:
              name: kong-session-config
              key: admin_gui_session_conf
        - name: KONG_ADMIN_GUI_URL
          value: "https://kong-manager.k3s.local"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl"
        - name: KONG_CLUSTER_TELEMETRY_LISTEN
          value: "0.0.0.0:8006 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_ENFORCE_RBAC
          value: "on"
        - name: KONG_KIC
          value: "on"
        - name: KONG_LICENSE_DATA
          valueFrom:
            secretKeyRef:
              name: kong-enterprise-license
              key: license
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: kong-enterprise-superuser-password
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql"
        - name: KONG_PG_PASSWORD
          value: "kong"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PLUGINS
          value: "bundled"
        - name: KONG_PORTAL
          value: "on"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PORTAL_API_LISTEN
          value: "0.0.0.0:8004"
        - name: KONG_PORTAL_API_URL
          value: "https://kong-portalapi.k3s.local"
        - name: KONG_PORTAL_GUI_HOST
          value: "kong-portal.k3s.local:443"
        - name: KONG_PORTAL_GUI_LISTEN
          value: "0.0.0.0:8003"
        - name: KONG_PORTAL_GUI_PROTOCOL
          value: "https"
        - name: KONG_PORTAL_SESSION_CONF
          valueFrom:
            secretKeyRef:
              key: portal_session_conf
              name: kong-session-config
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, 0.0.0.0:8443 http2 ssl"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_SMTP_MOCK
          value: "on"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        args: [ "kong", "migrations", "bootstrap" ]
        volumeMounts:
        - name: kong-cp-kong-prefix-dir
          mountPath: /kong_prefix/
        - name: kong-cp-kong-tmp
          mountPath: /tmp
        - name:  kong-cluster-cert
          mountPath: /etc/secrets/kong-cluster-cert
        
        resources:
          {}
      securityContext:
        {}
      restartPolicy: OnFailure
      volumes:
      - name: kong-cp-kong-prefix-dir
        emptyDir: {}
      - name: kong-cp-kong-tmp
        emptyDir: {}
      - name: kong-cp-kong-bash-wait-for-postgres
        configMap:
          name: kong-cp-kong-bash-wait-for-postgres
          defaultMode: 0755
      - name: kong-cluster-cert
        secret:
          secretName: kong-cluster-cert
---
# Source: kong/templates/service-kong-admin.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: kong-cp-kong-admin
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
spec:
  rules:
  - host: kong-admin.k3s.local
    http:
      paths:
        - backend:
            serviceName: kong-cp-kong-admin
            servicePort: 8001
          path: /
---
# Source: kong/templates/service-kong-manager.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: kong-cp-kong-manager
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
spec:
  rules:
  - host: kong-manager.k3s.local
    http:
      paths:
        - backend:
            serviceName: kong-cp-kong-manager
            servicePort: 8002
          path: /
---
# Source: kong/templates/service-kong-portal-api.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: kong-cp-kong-portalapi
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
spec:
  rules:
  - host: kong-portalapi.k3s.local
    http:
      paths:
        - backend:
            serviceName: kong-cp-kong-portalapi
            servicePort: 8004
          path: /
---
# Source: kong/templates/service-kong-portal.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: kong-cp-kong-portal
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
spec:
  rules:
  - host: kong-portal.k3s.local
    http:
      paths:
        - backend:
            serviceName: kong-cp-kong-portal
            servicePort: 8003
          path: /
---
# Source: kong/templates/tests/test-jobs.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "kong-cp-test-ingress"
  annotations:
    "helm.sh/hook": test
spec:
  restartPolicy: OnFailure
  containers:
    - name: "kong-cp-curl"
      image: curlimages/curl
      command:
        - curl
        - "http://kong-cp-kong-proxy.kong-control-plane.svc.cluster.local/httpbin"
---
# Source: kong/templates/tests/test-jobs.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "kong-cp-test-ingress-v1beta1"
  annotations:
    "helm.sh/hook": test
spec:
  restartPolicy: OnFailure
  containers:
    - name: "kong-cp-curl"
      image: curlimages/curl
      command:
        - curl
        - "http://kong-cp-kong-proxy.kong-control-plane.svc.cluster.local/httpbin-v1beta1"
---
# Source: kong/templates/migrations-post-upgrade.yaml
# Why is this Job duplicated and not using only helm hooks?
# See: https://github.com/helm/charts/pull/7362
apiVersion: batch/v1
kind: Job
metadata:
  name: kong-cp-kong-post-upgrade-migrations
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
    app.kubernetes.io/component: post-upgrade-migrations
  annotations:
    helm.sh/hook: "post-upgrade"
    helm.sh/hook-delete-policy: "before-hook-creation"
spec:
  backoffLimit: 
  template:
    metadata:
      name: kong-post-upgrade-migrations
      labels:
        app.kubernetes.io/name: kong
        helm.sh/chart: kong-2.6.1
        app.kubernetes.io/instance: "kong-cp"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/version: "2.6"
        app.kubernetes.io/component: post-upgrade-migrations
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: kong-cp-kong
      automountServiceAccountToken: true
      initContainers:
      - name: wait-for-postgres 
        image: kong/kong-gateway:2.6.0.0-alpine
        imagePullPolicy: IfNotPresent
        env:
         
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_API_URI
          value: "https://kong-admin.k3s.local"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_AUTH
          value: "basic-auth"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_LISTEN
          value: "0.0.0.0:8002"
        - name: KONG_ADMIN_GUI_SESSION_CONF
          valueFrom:
            secretKeyRef:
              name: kong-session-config
              key: admin_gui_session_conf
        - name: KONG_ADMIN_GUI_URL
          value: "https://kong-manager.k3s.local"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl"
        - name: KONG_CLUSTER_TELEMETRY_LISTEN
          value: "0.0.0.0:8006 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_ENFORCE_RBAC
          value: "on"
        - name: KONG_KIC
          value: "on"
        - name: KONG_LICENSE_DATA
          valueFrom:
            secretKeyRef:
              name: kong-enterprise-license
              key: license
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: kong-enterprise-superuser-password
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql"
        - name: KONG_PG_PASSWORD
          value: "kong"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PLUGINS
          value: "bundled"
        - name: KONG_PORTAL
          value: "on"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PORTAL_API_LISTEN
          value: "0.0.0.0:8004"
        - name: KONG_PORTAL_API_URL
          value: "https://kong-portalapi.k3s.local"
        - name: KONG_PORTAL_GUI_HOST
          value: "kong-portal.k3s.local:443"
        - name: KONG_PORTAL_GUI_LISTEN
          value: "0.0.0.0:8003"
        - name: KONG_PORTAL_GUI_PROTOCOL
          value: "https"
        - name: KONG_PORTAL_SESSION_CONF
          valueFrom:
            secretKeyRef:
              key: portal_session_conf
              name: kong-session-config
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, 0.0.0.0:8443 http2 ssl"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_SMTP_MOCK
          value: "on"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        command: [ "bash", "/wait_postgres/wait.sh" ]
        volumeMounts:
        - name: kong-cp-kong-bash-wait-for-postgres
          mountPath: /wait_postgres
        resources:
          {}
      containers:
      - name: kong-post-upgrade-migrations
        image: kong/kong-gateway:2.6.0.0-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
        
          {} 
        env:
         
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_API_URI
          value: "https://kong-admin.k3s.local"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_AUTH
          value: "basic-auth"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_LISTEN
          value: "0.0.0.0:8002"
        - name: KONG_ADMIN_GUI_SESSION_CONF
          valueFrom:
            secretKeyRef:
              name: kong-session-config
              key: admin_gui_session_conf
        - name: KONG_ADMIN_GUI_URL
          value: "https://kong-manager.k3s.local"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl"
        - name: KONG_CLUSTER_TELEMETRY_LISTEN
          value: "0.0.0.0:8006 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_ENFORCE_RBAC
          value: "on"
        - name: KONG_KIC
          value: "on"
        - name: KONG_LICENSE_DATA
          valueFrom:
            secretKeyRef:
              name: kong-enterprise-license
              key: license
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: kong-enterprise-superuser-password
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql"
        - name: KONG_PG_PASSWORD
          value: "kong"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PLUGINS
          value: "bundled"
        - name: KONG_PORTAL
          value: "on"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PORTAL_API_LISTEN
          value: "0.0.0.0:8004"
        - name: KONG_PORTAL_API_URL
          value: "https://kong-portalapi.k3s.local"
        - name: KONG_PORTAL_GUI_HOST
          value: "kong-portal.k3s.local:443"
        - name: KONG_PORTAL_GUI_LISTEN
          value: "0.0.0.0:8003"
        - name: KONG_PORTAL_GUI_PROTOCOL
          value: "https"
        - name: KONG_PORTAL_SESSION_CONF
          valueFrom:
            secretKeyRef:
              key: portal_session_conf
              name: kong-session-config
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, 0.0.0.0:8443 http2 ssl"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_SMTP_MOCK
          value: "on"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        args: [ "kong", "migrations", "finish" ]
        volumeMounts:
        - name: kong-cp-kong-prefix-dir
          mountPath: /kong_prefix/
        - name: kong-cp-kong-tmp
          mountPath: /tmp
        - name:  kong-cluster-cert
          mountPath: /etc/secrets/kong-cluster-cert
        
        resources:
          {}
      securityContext:
        {}
      restartPolicy: OnFailure
      volumes:
      - name: kong-cp-kong-prefix-dir
        emptyDir: {}
      - name: kong-cp-kong-tmp
        emptyDir: {}
      - name: kong-cp-kong-bash-wait-for-postgres
        configMap:
          name: kong-cp-kong-bash-wait-for-postgres
          defaultMode: 0755
      - name: kong-cluster-cert
        secret:
          secretName: kong-cluster-cert
---
# Source: kong/templates/migrations-pre-upgrade.yaml
# Why is this Job duplicated and not using only helm hooks?
# See: https://github.com/helm/charts/pull/7362
apiVersion: batch/v1
kind: Job
metadata:
  name: kong-cp-kong-pre-upgrade-migrations
  namespace: kong-control-plane
  labels:
    app.kubernetes.io/name: kong
    helm.sh/chart: kong-2.6.1
    app.kubernetes.io/instance: "kong-cp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.6"
    app.kubernetes.io/component: pre-upgrade-migrations
  annotations:
    helm.sh/hook: "pre-upgrade"
    helm.sh/hook-delete-policy: "before-hook-creation"
spec:
  backoffLimit: 
  template:
    metadata:
      name: kong-pre-upgrade-migrations
      labels:
        app.kubernetes.io/name: kong
        helm.sh/chart: kong-2.6.1
        app.kubernetes.io/instance: "kong-cp"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/version: "2.6"
        app.kubernetes.io/component: pre-upgrade-migrations
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: kong-cp-kong
      automountServiceAccountToken: true
      initContainers:
      - name: wait-for-postgres 
        image: kong/kong-gateway:2.6.0.0-alpine
        imagePullPolicy: IfNotPresent
        env:
         
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_API_URI
          value: "https://kong-admin.k3s.local"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_AUTH
          value: "basic-auth"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_LISTEN
          value: "0.0.0.0:8002"
        - name: KONG_ADMIN_GUI_SESSION_CONF
          valueFrom:
            secretKeyRef:
              name: kong-session-config
              key: admin_gui_session_conf
        - name: KONG_ADMIN_GUI_URL
          value: "https://kong-manager.k3s.local"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl"
        - name: KONG_CLUSTER_TELEMETRY_LISTEN
          value: "0.0.0.0:8006 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_ENFORCE_RBAC
          value: "on"
        - name: KONG_KIC
          value: "on"
        - name: KONG_LICENSE_DATA
          valueFrom:
            secretKeyRef:
              name: kong-enterprise-license
              key: license
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: kong-enterprise-superuser-password
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql"
        - name: KONG_PG_PASSWORD
          value: "kong"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PLUGINS
          value: "bundled"
        - name: KONG_PORTAL
          value: "on"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PORTAL_API_LISTEN
          value: "0.0.0.0:8004"
        - name: KONG_PORTAL_API_URL
          value: "https://kong-portalapi.k3s.local"
        - name: KONG_PORTAL_GUI_HOST
          value: "kong-portal.k3s.local:443"
        - name: KONG_PORTAL_GUI_LISTEN
          value: "0.0.0.0:8003"
        - name: KONG_PORTAL_GUI_PROTOCOL
          value: "https"
        - name: KONG_PORTAL_SESSION_CONF
          valueFrom:
            secretKeyRef:
              key: portal_session_conf
              name: kong-session-config
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, 0.0.0.0:8443 http2 ssl"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_SMTP_MOCK
          value: "on"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        command: [ "bash", "/wait_postgres/wait.sh" ]
        volumeMounts:
        - name: kong-cp-kong-bash-wait-for-postgres
          mountPath: /wait_postgres
        resources:
          {}
      containers:
      - name: kong-upgrade-migrations
        image: kong/kong-gateway:2.6.0.0-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
        
          {} 
        env:
         
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_API_URI
          value: "https://kong-admin.k3s.local"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_AUTH
          value: "basic-auth"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_LISTEN
          value: "0.0.0.0:8002"
        - name: KONG_ADMIN_GUI_SESSION_CONF
          valueFrom:
            secretKeyRef:
              name: kong-session-config
              key: admin_gui_session_conf
        - name: KONG_ADMIN_GUI_URL
          value: "https://kong-manager.k3s.local"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001"
        - name: KONG_CLUSTER_CERT
          value: "/etc/secrets/kong-cluster-cert/tls.crt"
        - name: KONG_CLUSTER_CERT_KEY
          value: "/etc/secrets/kong-cluster-cert/tls.key"
        - name: KONG_CLUSTER_LISTEN
          value: "0.0.0.0:8005 ssl"
        - name: KONG_CLUSTER_TELEMETRY_LISTEN
          value: "0.0.0.0:8006 ssl"
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_ENFORCE_RBAC
          value: "on"
        - name: KONG_KIC
          value: "on"
        - name: KONG_LICENSE_DATA
          valueFrom:
            secretKeyRef:
              name: kong-enterprise-license
              key: license
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: kong-enterprise-superuser-password
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_HOST
          value: "kong-cp-postgresql"
        - name: KONG_PG_PASSWORD
          value: "kong"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_USER
          value: "kong"
        - name: KONG_PLUGINS
          value: "bundled"
        - name: KONG_PORTAL
          value: "on"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PORTAL_API_LISTEN
          value: "0.0.0.0:8004"
        - name: KONG_PORTAL_API_URL
          value: "https://kong-portalapi.k3s.local"
        - name: KONG_PORTAL_GUI_HOST
          value: "kong-portal.k3s.local:443"
        - name: KONG_PORTAL_GUI_LISTEN
          value: "0.0.0.0:8003"
        - name: KONG_PORTAL_GUI_PROTOCOL
          value: "https"
        - name: KONG_PORTAL_SESSION_CONF
          valueFrom:
            secretKeyRef:
              key: portal_session_conf
              name: kong-session-config
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, 0.0.0.0:8443 http2 ssl"
        - name: KONG_ROLE
          value: "control_plane"
        - name: KONG_SMTP_MOCK
          value: "on"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        args: [ "kong", "migrations", "up" ]
        volumeMounts:
        - name: kong-cp-kong-prefix-dir
          mountPath: /kong_prefix/
        - name: kong-cp-kong-tmp
          mountPath: /tmp
        - name:  kong-cluster-cert
          mountPath: /etc/secrets/kong-cluster-cert
        
        resources:
          {}
      securityContext:
        {}
      restartPolicy: OnFailure
      volumes:
      - name: kong-cp-kong-prefix-dir
        emptyDir: {}
      - name: kong-cp-kong-tmp
        emptyDir: {}
      - name: kong-cp-kong-bash-wait-for-postgres
        configMap:
          name: kong-cp-kong-bash-wait-for-postgres
          defaultMode: 0755
      - name: kong-cluster-cert
        secret:
          secretName: kong-cluster-cert
